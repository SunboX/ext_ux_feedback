{"ts":1342035432908,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Copyright (c) 2012 Andr√© Fiedler, <https://twitter.com/sonnenkiste>\n *\n * license: MIT-style license\n */\n\nExt.define('Ux.feedback.FeedbackWindow', {\n    extend: 'Ext.window.Window',\n    \n    alias: 'widget.feedbackWindow',\n\n    requires: [\n        'Ext.toolbar.Toolbar',\n        'Ext.form.field.Text',\n        'Ext.form.field.TextArea',\n        'Ext.button.Button',\n        'Ext.layout.container.Anchor',\n        'Ext.layout.container.HBox',\n        'Ext.ProgressBar'\n    ],\n\n    /**\n     * Button config that displays a single OK button\n     * @type Number\n     */\n    OK : 1,\n    /**\n     * Button config that displays a single Yes button\n     * @type Number\n     */\n    YES : 2,\n    /**\n     * Button config that displays a single No button\n     * @type Number\n     */\n    NO : 4,\n    /**\n     * Button config that displays a single Cancel button\n     * @type Number\n     */\n    CANCEL : 8,\n    /**\n     * Button config that displays OK and Cancel buttons\n     * @type Number\n     */\n    OKCANCEL : 9,\n    /**\n     * Button config that displays Yes and No buttons\n     * @type Number\n     */\n    YESNO : 6,\n    /**\n     * Button config that displays Yes, No and Cancel buttons\n     * @type Number\n     */\n    YESNOCANCEL : 14,\n    /**\n     * The CSS class that provides the INFO icon image\n     * @type String\n     */\n    INFO : 'ext-mb-info',\n    /**\n     * The CSS class that provides the WARNING icon image\n     * @type String\n     */\n    WARNING : 'ext-mb-warning',\n    /**\n     * The CSS class that provides the QUESTION icon image\n     * @type String\n     */\n    QUESTION : 'ext-mb-question',\n    /**\n     * The CSS class that provides the ERROR icon image\n     * @type String\n     */\n    ERROR : 'ext-mb-error',\n\n    // hide it by offsets. Windows are hidden on render by default.\n    hideMode: 'offsets',\n    closeAction: 'hide',\n    resizable: false,\n    title: '&#160;',\n\n    width: 500,\n    height: 500,\n    minWidth: 250,\n    maxWidth: 500,\n    minHeight: 110,\n    maxHeight: 500,\n    constrain: true,\n\n    cls: Ext.baseCSSPrefix + 'message-box',\n\n    layout: {\n        type: 'anchor'\n    },\n\n    /**\n     * The default height in pixels of the message box's multiline textarea if displayed.\n     * @type Number\n     */\n    defaultTextHeight : 75,\n    /**\n     * The minimum width in pixels of the message box if it is a progress-style dialog.  This is useful\n     * for setting a different minimum width than text-only dialogs may need.\n     * @type Number\n     */\n    minProgressWidth : 250,\n    /**\n     * The minimum width in pixels of the message box if it is a prompt dialog.  This is useful\n     * for setting a different minimum width than text-only dialogs may need.\n     * @type Number\n     */\n    minPromptWidth: 250,\n    /**\n     * An object containing the default button text strings that can be overriden for localized language support.\n     * Supported properties are: ok, cancel, yes and no.  Generally you should include a locale-specific\n     * resource file for handling language support across the framework.\n     * Customize the default text like so: Ext.window.MessageBox.buttonText.yes = \"oui\"; //french\n     * @type Object\n     */\n    buttonText: {\n        ok: 'Give feedback',\n        yes: 'Yes',\n        no: 'No',\n        cancel: 'Cancel'\n    },\n\n    buttonIds: [\n        'ok', 'yes', 'no', 'cancel'\n    ],\n\n    iconHeight: 35,\n\n    makeButton: function(btnIdx) {\n        var btnId = this.buttonIds[btnIdx];\n        return Ext.create('Ext.button.Button', {\n            handler: this.btnCallback,\n            itemId: btnId,\n            scope: this,\n            text: this.buttonText[btnId],\n            minWidth: 75\n        });\n    },\n\n    btnCallback: function(btn) {\n        var me = this,\n            value,\n            field;\n\n        field = me.textArea;\n        value = field.getValue();\n        field.reset();\n\n        // Important not to have focus remain in the hidden Window; Interferes with DnD.\n        btn.blur();\n        me.hide();\n        me.userCallback(btn.itemId, value, me.cfg);\n    },\n\n    hide: function() {\n        var me = this;\n        me.dd.endDrag();\n        me.progressBar.reset();\n        me.removeCls(me.cfg.cls);\n        me.callParent();\n    },\n\n    initComponent: function() {\n        var me = this,\n            i, button;\n\n        me.title = '&#160;';\n\n        me.topContainer = Ext.create('Ext.container.Container', {\n            anchor: '100%',\n            style: {\n                padding: '10px',\n                overflow: 'hidden'\n            },\n            items: [\n                me.iconComponent = Ext.create('Ext.Component', {\n                    cls: 'ext-mb-icon',\n                    width: 50,\n                    height: me.iconHeight,\n                    style: {\n                        'float': 'left'\n                    }\n                }),\n                me.promptContainer = Ext.create('Ext.container.Container', {\n                    layout: {\n                        type: 'anchor'\n                    },\n                    items: [\n                        me.msg = Ext.create('Ext.Component', {\n                            autoEl: { tag: 'span' },\n                            cls: 'ext-mb-text'\n                        }),\n                        me.textArea = Ext.create('Ext.form.field.TextArea', {\n                            anchor: '100%',\n                            height: 100,\n                            margin: '15 0 0 0'\n                        })\n                    ]\n                })\n            ]\n        });\n        me.progressBar = Ext.create('Ext.ProgressBar', {\n            anchor: '-10',\n            style: 'margin-left:10px'\n        });\n\n        me.items = [me.topContainer, me.progressBar];\n\n        // Create the buttons based upon passed bitwise config\n        me.msgButtons = [];\n        for (i = 0; i < 4; i++) {\n            button = me.makeButton(i);\n            me.msgButtons[button.itemId] = button;\n            me.msgButtons.push(button);\n        }\n        me.bottomTb = Ext.create('Ext.toolbar.Toolbar', {\n            ui: 'footer',\n            dock: 'bottom',\n            layout: {\n                pack: 'center'\n            },\n            items: [\n                me.msgButtons[0],\n                me.msgButtons[1],\n                me.msgButtons[2],\n                me.msgButtons[3]\n            ],\n            padding: '0 0 10 0'\n        });\n        me.dockedItems = [me.bottomTb];\n\n        me.callParent();\n    },\n\n    reconfigure: function(cfg) {\n        var me = this,\n            buttons = cfg.buttons || 0,\n            hideToolbar = true,\n            initialWidth = me.maxWidth,\n            i;\n\n        cfg = cfg || {};\n        me.cfg = cfg;\n        if (cfg.width) {\n            initialWidth = cfg.width;\n        }\n\n        // Default to allowing the Window to take focus.\n        delete me.defaultFocus;\n\n        // clear any old animateTarget\n        me.animateTarget = cfg.animateTarget || undefined;\n\n        // Defaults to modal\n        me.modal = cfg.modal !== false;\n\n        // Show the title\n        if (cfg.title) {\n            me.setTitle(cfg.title||'&#160;');\n        }\n\n        if (!me.rendered) {\n            me.width = initialWidth;\n            me.render(Ext.getBody());\n        } else {\n            me.setSize(initialWidth, me.maxHeight);\n        }\n        me.setPosition(-10000, -10000);\n\n        // Hide or show the close tool\n        me.closable = cfg.closable && !cfg.wait;\n        me.header.child('[type=close]').setVisible(cfg.closable !== false);\n\n        // Hide or show the header\n        if (!cfg.title && !me.closable) {\n            me.header.hide();\n        } else {\n            me.header.show();\n        }\n\n        // Default to dynamic drag: drag the window, not a ghost\n        me.liveDrag = !cfg.proxyDrag;\n\n        // wrap the user callback\n        me.userCallback = Ext.Function.bind(cfg.callback ||cfg.fn || Ext.emptyFn, cfg.scope || Ext.global);\n\n        // Hide or show the icon Component\n        me.setIcon(cfg.icon);\n\n        // Hide or show the message area\n        if (cfg.msg) {\n            me.msg.update(cfg.msg);\n            me.msg.show();\n        } else {\n            me.msg.hide();\n        }\n\n        // Hide or show the input field\n        if (cfg.prompt || cfg.multiline) {\n            me.multiline = cfg.multiline;\n            if (cfg.multiline) {\n                me.textArea.setValue(cfg.value);\n                me.textArea.setHeight(cfg.defaultTextHeight || me.defaultTextHeight);\n                me.textArea.show();\n                me.defaultFocus = me.textArea;\n            } else {\n                me.textArea.hide();\n            }\n        } else {\n            me.textArea.hide();\n        }\n\n        // Hide or show the progress bar\n        if (cfg.progress || cfg.wait) {\n            me.progressBar.show();\n            me.updateProgress(0, cfg.progressText);\n            if(cfg.wait === true){\n                me.progressBar.wait(cfg.waitConfig);\n            }\n        } else {\n            me.progressBar.hide();\n        }\n\n        // Hide or show buttons depending on flag value sent.\n        for (i = 0; i < 4; i++) {\n            if (buttons & Math.pow(2, i)) {\n\n                // Default to focus on the first visible button if focus not already set\n                if (!me.defaultFocus) {\n                    me.defaultFocus = me.msgButtons[i];\n                }\n                me.msgButtons[i].show();\n                hideToolbar = false;\n            } else {\n                me.msgButtons[i].hide();\n            }\n        }\n\n        // Hide toolbar if no buttons to show\n        if (hideToolbar) {\n            me.bottomTb.hide();\n        } else {\n            me.bottomTb.show();\n        }\n    },\n\n    /**\n     * Displays a new message box, or reinitializes an existing message box, based on the config options\n     * passed in. All display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally,\n     * although those calls are basic shortcuts and do not support all of the config options allowed here.\n     * @return {Ext.window.MessageBox} this\n     */\n    show: function(cfg) {\n        var me = this;\n\n        me.reconfigure(cfg);\n        me.addCls(cfg.cls);\n        if (cfg.animateTarget) {\n            me.doAutoSize(true);\n            me.callParent();\n        } else {\n            me.callParent();\n            me.doAutoSize(true);\n        }\n        return me;\n    },\n\n    afterShow: function(){\n        if (this.animateTarget) {\n            this.center();\n        }\n        this.callParent(arguments);\n    },\n\n    doAutoSize: function(center) {\n        var me = this,\n            icon = me.iconComponent,\n            iconHeight = me.iconHeight;\n\n        if (!Ext.isDefined(me.frameWidth)) {\n            me.frameWidth = me.el.getWidth() - me.body.getWidth();\n        }\n\n        // reset to the original dimensions\n        icon.setHeight(iconHeight);\n\n        // Allow per-invocation override of minWidth\n        me.minWidth = me.cfg.minWidth || Ext.getClass(this).prototype.minWidth;\n\n        // Set best possible size based upon allowing the text to wrap in the maximized Window, and\n        // then constraining it to within the max with. Then adding up constituent element heights.\n        me.topContainer.doLayout();\n        if (Ext.isIE6 || Ext.isIEQuirks) {\n            // In IE quirks, the initial full width of the prompt fields will prevent the container element\n            // from collapsing once sized down, so temporarily force them to a small width. They'll get\n            // layed out to their final width later when setting the final window size.\n            me.textArea.setCalculatedSize(9);\n        }\n        var width = me.cfg.width || me.msg.getWidth() + icon.getWidth() + 25, /* topContainer's layout padding */\n            height = (me.header.rendered ? me.header.getHeight() : 0) +\n            Math.max(me.promptContainer.getHeight(), icon.getHeight()) +\n            me.progressBar.getHeight() +\n            (me.bottomTb.rendered ? me.bottomTb.getHeight() : 0) + 20 ;/* topContainer's layout padding */\n\n        // Update to the size of the content, this way the text won't wrap under the icon.\n        icon.setHeight(Math.max(iconHeight, me.msg.getHeight()));\n        me.setSize(width + me.frameWidth, height + me.frameWidth);\n        if (center) {\n            me.center();\n        }\n        return me;\n    },\n\n    updateText: function(text) {\n        this.msg.update(text);\n        return this.doAutoSize(true);\n    },\n\n    /**\n     * Adds the specified icon to the dialog.  By default, the class 'ext-mb-icon' is applied for default\n     * styling, and the class passed in is expected to supply the background image url. Pass in empty string ('')\n     * to clear any existing icon. This method must be called before the MessageBox is shown.\n     * The following built-in icon classes are supported, but you can also pass in a custom class name:\n     * <pre>\nExt.window.MessageBox.INFO\nExt.window.MessageBox.WARNING\nExt.window.MessageBox.QUESTION\nExt.window.MessageBox.ERROR\n     *</pre>\n     * @param {String} icon A CSS classname specifying the icon's background image url, or empty string to clear the icon\n     * @return {Ext.window.MessageBox} this\n     */\n    setIcon : function(icon) {\n        var me = this;\n        me.iconComponent.removeCls(me.iconCls);\n        if (icon) {\n            me.iconComponent.show();\n            me.iconComponent.addCls(Ext.baseCSSPrefix + 'dlg-icon');\n            me.iconComponent.addCls(me.iconCls = icon);\n        } else {\n            me.iconComponent.removeCls(Ext.baseCSSPrefix + 'dlg-icon');\n            me.iconComponent.hide();\n        }\n        return me;\n    },\n\n    /**\n     * Updates a progress-style message box's text and progress bar. Only relevant on message boxes\n     * initiated via {@link Ext.window.MessageBox#progress} or {@link Ext.window.MessageBox#wait},\n     * or by calling {@link Ext.window.MessageBox#show} with progress: true.\n     * @param {Number} [value=0] Any number between 0 and 1 (e.g., .5)\n     * @param {String} [progressText=''] The progress text to display inside the progress bar.\n     * @param {String} [msg] The message box's body text is replaced with the specified string (defaults to undefined\n     * so that any existing body text will not get overwritten by default unless a new value is passed in)\n     * @return {Ext.window.MessageBox} this\n     */\n    updateProgress : function(value, progressText, msg){\n        this.progressBar.updateProgress(value, progressText);\n        if (msg){\n            this.updateText(msg);\n        }\n        return this;\n    },\n\n    onEsc: function() {\n        if (this.closable !== false) {\n            this.callParent(arguments);\n        }\n    },\n\n    /**\n     * Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm).\n     * If a callback function is passed it will be called after the user clicks either button,\n     * and the id of the button that was clicked will be passed as the only parameter to the callback\n     * (could also be the top-right close button).\n     * @param {String} title The title bar text\n     * @param {String} msg The message box body text\n     * @param {Function} fn (optional) The callback function invoked after the message box is closed\n     * @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to the browser wnidow.\n     * @return {Ext.window.MessageBox} this\n     */\n    confirm: function(cfg, msg, fn, scope) {\n        if (Ext.isString(cfg)) {\n            cfg = {\n                title: cfg,\n                icon: 'ext-mb-question',\n                msg: msg,\n                buttons: this.YESNO,\n                callback: fn,\n                scope: scope\n            };\n        }\n        return this.show(cfg);\n    },\n\n    /**\n     * Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt).\n     * The prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user\n     * clicks either button, and the id of the button that was clicked (could also be the top-right\n     * close button) and the text that was entered will be passed as the two parameters to the callback.\n     * @param {String} title The title bar text\n     * @param {String} msg The message box body text\n     * @param {Function} [fn] The callback function invoked after the message box is closed\n     * @param {Object} [scope] The scope (<code>this</code> reference) in which the callback is executed. Defaults to the browser wnidow.\n     * @param {Boolean/Number} [multiline=false] True to create a multiline textbox using the defaultTextHeight\n     * property, or the height in pixels to create the textbox/\n     * @param {String} [value=''] Default value of the text input element\n     * @return {Ext.window.MessageBox} this\n     */\n    prompt : function(cfg, msg, fn, scope, multiline, value){\n        if (Ext.isString(cfg)) {\n            cfg = {\n                prompt: true,\n                title: cfg,\n                minWidth: this.minPromptWidth,\n                msg: msg,\n                buttons: this.OKCANCEL,\n                callback: fn,\n                scope: scope,\n                multiline: multiline,\n                value: value\n            };\n        }\n        return this.show(cfg);\n    },\n\n    /**\n     * Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user\n     * interaction while waiting for a long-running process to complete that does not have defined intervals.\n     * You are responsible for closing the message box when the process is complete.\n     * @param {String} msg The message box body text\n     * @param {String} title (optional) The title bar text\n     * @param {Object} config (optional) A {@link Ext.ProgressBar#wait} config object\n     * @return {Ext.window.MessageBox} this\n     */\n    wait : function(cfg, title, config){\n        if (Ext.isString(cfg)) {\n            cfg = {\n                title : title,\n                msg : cfg,\n                closable: false,\n                wait: true,\n                modal: true,\n                minWidth: this.minProgressWidth,\n                waitConfig: config\n            };\n        }\n        return this.show(cfg);\n    },\n\n    /**\n     * Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).\n     * If a callback function is passed it will be called after the user clicks the button, and the\n     * id of the button that was clicked will be passed as the only parameter to the callback\n     * (could also be the top-right close button).\n     * @param {String} title The title bar text\n     * @param {String} msg The message box body text\n     * @param {Function} fn (optional) The callback function invoked after the message box is closed\n     * @param {Object} scope (optional) The scope (<code>this</code> reference) in which the callback is executed. Defaults to the browser wnidow.\n     * @return {Ext.window.MessageBox} this\n     */\n    alert: function(cfg, msg, fn, scope) {\n        if (Ext.isString(cfg)) {\n            cfg = {\n                title : cfg,\n                msg : msg,\n                buttons: this.OK,\n                fn: fn,\n                scope : scope,\n                minWidth: this.minWidth\n            };\n        }\n        return this.show(cfg);\n    },\n\n    /**\n     * Displays a message box with a progress bar.  This message box has no buttons and is not closeable by\n     * the user.  You are responsible for updating the progress bar as needed via {@link Ext.window.MessageBox#updateProgress}\n     * and closing the message box when the process is complete.\n     * @param {String} title The title bar text\n     * @param {String} msg The message box body text\n     * @param {String} [progressText=''] The text to display inside the progress bar\n     * @return {Ext.window.MessageBox} this\n     */\n    progress : function(cfg, msg, progressText){\n        if (Ext.isString(cfg)) {\n            cfg = {\n                title: cfg,\n                msg: msg,\n                progress: true,\n                progressText: progressText\n            };\n        }\n        return this.show(cfg);\n    }\n});"]],"start1":0,"start2":0,"length1":0,"length2":20342}]],"length":20342}
