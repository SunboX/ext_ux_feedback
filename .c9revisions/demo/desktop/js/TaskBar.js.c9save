{"ts":1378714481666,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\n * Ext JS Library 4.0\n * Copyright(c) 2006-2011 Sencha Inc.\n * licensing@sencha.com\n * http://www.sencha.com/license\n */\n\n/**\n * @class Ext.ux.desktop.TaskBar\n * @extends Ext.toolbar.Toolbar\n */\nExt.define('Ext.ux.desktop.TaskBar', {\n    // This must be a toolbar. we rely on acquired toolbar classes and inherited toolbar methods for our\n    // child items to instantiate and render correctly.\n    extend: 'Ext.toolbar.Toolbar',\n\n    requires: [\n        'Ext.button.Button',\n        'Ext.resizer.Splitter',\n        'Ext.menu.Menu',\n\n        'Ext.ux.desktop.StartMenu'\n    ],\n\n    alias: 'widget.taskbar',\n\n    cls: 'ux-taskbar',\n\n    /**\n     * @cfg {String} startBtnText\n     * The text for the Start Button.\n     */\n    startBtnText: 'Start',\n\n    initComponent: function () {\n        var me = this;\n        \n        me.startMenu = new Ext.ux.desktop.StartMenu(me.startConfig);\n\n        me.quickStart = new Ext.toolbar.Toolbar(me.getQuickStart());\n\n        me.windowBar = new Ext.toolbar.Toolbar(me.getWindowBarConfig());\n\n        me.tray = new Ext.toolbar.Toolbar(me.getTrayConfig());\n\n        me.items = [\n            {\n                xtype: 'button',\n                cls: 'ux-start-button',\n                iconCls: 'ux-start-button-icon',\n                menu: me.startMenu,\n                menuAlign: 'bl-tl',\n                text: me.startBtnText\n            },\n            me.quickStart,\n            {\n                xtype: 'splitter', html: '&#160;',\n                height: 14, width: 2, // TODO - there should be a CSS way here\n                cls: 'x-toolbar-separator x-toolbar-separator-horizontal'\n            },\n            me.windowBar,\n            '-',\n            me.tray\n        ];\n\n        me.callParent();\n    },\n\n    afterLayout: function () {\n        var me = this;\n        me.callParent();\n        me.windowBar.el.on('contextmenu', me.onButtonContextMenu, me);\n    },\n\n    /**\n     * This method returns the configuration object for the Quick Start toolbar. A derived\n     * class can override this method, call the base version to build the config and\n     * then modify the returned object before returning it.\n     */\n    getQuickStart: function () {\n        var me = this, ret = {\n            minWidth: 20,\n            width: Ext.themeName === 'neptune' ? 70 : 60,\n            items: [],\n            enableOverflow: true\n        };\n\n        Ext.each(this.quickStart, function (item) {\n            ret.items.push({\n                tooltip: { text: item.name, align: 'bl-tl' },\n                //tooltip: item.name,\n                overflowText: item.name,\n                iconCls: item.iconCls,\n                module: item.module,\n                handler: me.onQuickStartClick,\n                scope: me\n            });\n        });\n\n        return ret;\n    },\n\n    /**\n     * This method returns the configuration object for the Tray toolbar. A derived\n     * class can override this method, call the base version to build the config and\n     * then modify the returned object before returning it.\n     */\n    getTrayConfig: function () {\n        var ret = {\n            items: this.trayItems\n        };\n        delete this.trayItems;\n        return ret;\n    },\n\n    getWindowBarConfig: function () {\n        return {\n            flex: 1,\n            cls: 'ux-desktop-windowbar',\n            items: [ '&#160;' ],\n            layout: { overflowHandler: 'Scroller' }\n        };\n    },\n\n    getWindowBtnFromEl: function (el) {\n        var c = this.windowBar.getChildByElement(el);\n        return c || null;\n    },\n\n    onQuickStartClick: function (btn) {\n        var module = this.app.getModule(btn.module),\n            window;\n\n        if (module) {\n            window = module.createWindow();\n            window.show();\n        }\n    },\n    \n    onButtonContextMenu: function (e) {\n        var me = this, t = e.getTarget(), btn = me.getWindowBtnFromEl(t);\n        if (btn) {\n            e.stopEvent();\n            me.windowMenu.theWin = btn.win;\n            me.windowMenu.showBy(t);\n        }\n    },\n\n    onWindowBtnClick: function (btn) {\n        var win = btn.win;\n\n        if (win.minimized || win.hidden) {\n            btn.disable();\n            win.show(null, function() {\n                btn.enable();\n            });\n        } else if (win.active) {\n            btn.disable();\n            win.on('hide', function() {\n                btn.enable();\n            }, null, {single: true});\n            win.minimize();\n        } else {\n            win.toFront();\n        }\n    },\n\n    addTaskButton: function(win) {\n        var config = {\n            iconCls: win.iconCls,\n            enableToggle: true,\n            toggleGroup: 'all',\n            width: 140,\n            margins: '0 2 0 3',\n            text: Ext.util.Format.ellipsis(win.title, 20),\n            listeners: {\n                click: this.onWindowBtnClick,\n                scope: this\n            },\n            win: win\n        };\n\n        var cmp = this.windowBar.add(config);\n        cmp.toggle(true);\n        return cmp;\n    },\n\n    removeTaskButton: function (btn) {\n        var found, me = this;\n        me.windowBar.items.each(function (item) {\n            if (item === btn) {\n                found = item;\n            }\n            return !found;\n        });\n        if (found) {\n            me.windowBar.remove(found);\n        }\n        return found;\n    },\n\n    setActiveButton: function(btn) {\n        if (btn) {\n            btn.toggle(true);\n        } else {\n            this.windowBar.items.each(function (item) {\n                if (item.isButton) {\n                    item.toggle(false);\n                }\n            });\n        }\n    }\n});\n\n/**\n * @class Ext.ux.desktop.TrayClock\n * @extends Ext.toolbar.TextItem\n * This class displays a clock on the toolbar.\n */\nExt.define('Ext.ux.desktop.TrayClock', {\n    extend: 'Ext.toolbar.TextItem',\n\n    alias: 'widget.trayclock',\n\n    cls: 'ux-desktop-trayclock',\n\n    html: '&#160;',\n\n    timeFormat: 'g:i A',\n\n    tpl: '{time}',\n\n    initComponent: function () {\n        var me = this;\n\n        me.callParent();\n\n        if (typeof(me.tpl) == 'string') {\n            me.tpl = new Ext.XTemplate(me.tpl);\n        }\n    },\n\n    afterRender: function () {\n        var me = this;\n        Ext.Function.defer(me.updateTime, 100, me);\n        me.callParent();\n    },\n\n    onDestroy: function () {\n        var me = this;\n\n        if (me.timer) {\n            window.clearTimeout(me.timer);\n            me.timer = null;\n        }\n\n        me.callParent();\n    },\n\n    updateTime: function () {\n        var me = this, time = Ext.Date.format(new Date(), me.timeFormat),\n            text = me.tpl.apply({ time: time });\n        if (me.lastText != text) {\n            me.setText(text);\n            me.lastText = text;\n        }\n        me.timer = Ext.Function.defer(me.updateTime, 10000, me);\n    }\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":6854}]],"length":6854}
{"contributors":[],"silentsave":false,"ts":1378726716774,"patch":[[{"diffs":[[0,"artMenu'"],[1,",\n        'Ux.feedback.FeedbackButton'"],[0,"\n    ],\n"]],"start1":564,"start2":564,"length1":16,"length2":54}]],"length":6892,"saved":false}
{"ts":1378726800499,"patch":[[{"diffs":[[0,"enu'"],[-1,",\n        'Ux.feedback.FeedbackButton'"],[0,"\n   "]],"start1":568,"start2":568,"length1":46,"length2":8}]],"length":6854,"saved":false}
{"ts":1378745326886,"patch":[[{"diffs":[[0,"rtMenu'\n"],[1,"\n"],[0,"    ],\n\n"]],"start1":565,"start2":565,"length1":16,"length2":17}]],"length":6855,"saved":false}
{"ts":1378745328265,"patch":[[{"diffs":[[0,"rtMenu'\n"],[-1,"\n"],[0,"    ],\n\n"]],"start1":565,"start2":565,"length1":17,"length2":16}]],"length":6854,"saved":false}
